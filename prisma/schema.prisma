generator client {
    provider             = "prisma-client-py"
    interface            = "asyncio"
    recursive_type_depth = 10
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

model User {
    id                         Int            @id @default(autoincrement())
    tel_id                     BigInt         @unique
    chat_id                    BigInt
    role                       UserRole       @default(STUDENT)
    team                       Team           @default(NO_TEAM)
    name                       String
    nickname                   String         @db.VarChar(255)
    student_code               String         @db.VarChar(20)
    created_at                 DateTime       @default(now())
    correct_answered_questions Question[]     @relation("correct_questions")
    wrong_answered_questions   Question[]     @relation("wrong_questions")
    answered_questions_box     QuestionsBox[]
    tasks                      Task[]
}

model Question {
    id              Int              @id @default(autoincrement())
    question        String           @db.VarChar(255)
    options         QuestionOption[]
    score           Int
    created_at      DateTime         @default(now())
    w_users         User[]           @relation("correct_questions")
    c_users         User[]           @relation("wrong_questions")
    question_box_id Int?
    question_box    QuestionsBox?    @relation(fields: [question_box_id], references: [id], onDelete: Cascade)
}

model QuestionOption {
    id          Int       @id @default(autoincrement())
    label       String    @db.VarChar(255)
    is_answer   Boolean   @default(false)
    question_id Int?
    question    Question? @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model QuestionsBox {
    id         Int        @id @default(autoincrement())
    label      String     @db.VarChar(255)
    team       Team
    duration   Int
    deadline   DateTime
    created_at DateTime   @default(now())
    questions  Question[]
    users      User[]
}

model Task {
    id         Int      @id @default(autoincrement())
    job        String
    weight     Float
    team       Team
    deadline   DateTime
    mark_done  Boolean  @default(false)
    approved   Boolean  @default(false)
    created_at DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     Int
}

enum UserRole {
    STUDENT
    HEAD
    ADMIN
}

enum Team {
    FRONT_END
    BACK_END
    GRAPHIC
    CLIENT
    BRANDING
    EXECUTIVE
    KERNEL
    HR
    DEVOPS
    QA
    NO_TEAM
}
